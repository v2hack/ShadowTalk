// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: share.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "share.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace peersafe {
namespace share {

void protobuf_ShutdownFile_share_2eproto() {
  delete ShareFile::default_instance_;
  delete ShareListSubItem::default_instance_;
  delete ShareListItem::default_instance_;
  delete ShareList::default_instance_;
  delete ShareSubCommen::default_instance_;
  delete ShareComment::default_instance_;
  delete ShareContent::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_share_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_share_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ShareFile::default_instance_ = new ShareFile();
  ShareListSubItem::default_instance_ = new ShareListSubItem();
  ShareListItem::default_instance_ = new ShareListItem();
  ShareList::default_instance_ = new ShareList();
  ShareSubCommen::default_instance_ = new ShareSubCommen();
  ShareComment::default_instance_ = new ShareComment();
  ShareContent::default_instance_ = new ShareContent();
  ShareFile::default_instance_->InitAsDefaultInstance();
  ShareListSubItem::default_instance_->InitAsDefaultInstance();
  ShareListItem::default_instance_->InitAsDefaultInstance();
  ShareList::default_instance_->InitAsDefaultInstance();
  ShareSubCommen::default_instance_->InitAsDefaultInstance();
  ShareComment::default_instance_->InitAsDefaultInstance();
  ShareContent::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_share_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_share_2eproto_once_);
void protobuf_AddDesc_share_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_share_2eproto_once_,
                 &protobuf_AddDesc_share_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_share_2eproto {
  StaticDescriptorInitializer_share_2eproto() {
    protobuf_AddDesc_share_2eproto();
  }
} static_descriptor_initializer_share_2eproto_;
#endif

// ===================================================================

bool ShareFile_FileType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ShareFile_FileType ShareFile::FILE_TYPE_SHARE_LIST;
const ShareFile_FileType ShareFile::FILE_TYPE_SHARE_CONTENT;
const ShareFile_FileType ShareFile::FILE_TYPE_SHARE_COMMENT;
const ShareFile_FileType ShareFile::FileType_MIN;
const ShareFile_FileType ShareFile::FileType_MAX;
const int ShareFile::FileType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ShareFile::kFileTypeFieldNumber;
const int ShareFile::kFileDataFieldNumber;
#endif  // !_MSC_VER

ShareFile::ShareFile()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ShareFile::InitAsDefaultInstance() {
}

ShareFile::ShareFile(const ShareFile& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ShareFile::SharedCtor() {
  _cached_size_ = 0;
  file_type_ = 1;
  file_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShareFile::~ShareFile() {
  SharedDtor();
}

void ShareFile::SharedDtor() {
  if (file_data_ != &::google::protobuf::internal::GetEmptyString()) {
    delete file_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ShareFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShareFile& ShareFile::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_share_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_share_2eproto();
#endif
  return *default_instance_;
}

ShareFile* ShareFile::default_instance_ = NULL;

ShareFile* ShareFile::New() const {
  return new ShareFile;
}

void ShareFile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    file_type_ = 1;
    if (has_file_data()) {
      if (file_data_ != &::google::protobuf::internal::GetEmptyString()) {
        file_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ShareFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .peersafe.share.ShareFile.FileType file_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::peersafe::share::ShareFile_FileType_IsValid(value)) {
            set_file_type(static_cast< ::peersafe::share::ShareFile_FileType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_file_data;
        break;
      }

      // optional bytes file_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShareFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .peersafe.share.ShareFile.FileType file_type = 1;
  if (has_file_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->file_type(), output);
  }

  // optional bytes file_data = 2;
  if (has_file_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->file_data(), output);
  }

}

int ShareFile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .peersafe.share.ShareFile.FileType file_type = 1;
    if (has_file_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->file_type());
    }

    // optional bytes file_data = 2;
    if (has_file_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->file_data());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShareFile::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShareFile*>(&from));
}

void ShareFile::MergeFrom(const ShareFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_type()) {
      set_file_type(from.file_type());
    }
    if (from.has_file_data()) {
      set_file_data(from.file_data());
    }
  }
}

void ShareFile::CopyFrom(const ShareFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShareFile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ShareFile::Swap(ShareFile* other) {
  if (other != this) {
    std::swap(file_type_, other->file_type_);
    std::swap(file_data_, other->file_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShareFile::GetTypeName() const {
  return "peersafe.share.ShareFile";
}


// ===================================================================

bool ShareListSubItem_ContentType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ShareListSubItem_ContentType ShareListSubItem::SHARE_CONTENT_TYPE_WORDS;
const ShareListSubItem_ContentType ShareListSubItem::SHARE_CONTENT_TYPE_IMAGE;
const ShareListSubItem_ContentType ShareListSubItem::SHARE_CONTENT_TYPE_AUDIO;
const ShareListSubItem_ContentType ShareListSubItem::SHARE_CONTENT_TYPE_VEDIO;
const ShareListSubItem_ContentType ShareListSubItem::SHARE_CONTENT_TYPE_PDF;
const ShareListSubItem_ContentType ShareListSubItem::SHARE_CONTENT_TYPE_OFFICE_WORD;
const ShareListSubItem_ContentType ShareListSubItem::SHARE_CONTENT_TYPE_OFFICE_EXCEL;
const ShareListSubItem_ContentType ShareListSubItem::ContentType_MIN;
const ShareListSubItem_ContentType ShareListSubItem::ContentType_MAX;
const int ShareListSubItem::ContentType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ShareListSubItem::kShareContentTypeFieldNumber;
const int ShareListSubItem::kShareFileNameFieldNumber;
const int ShareListSubItem::kThumbnailFileNameFieldNumber;
const int ShareListSubItem::kThumbnailDataFieldNumber;
const int ShareListSubItem::kShareContentHashFieldNumber;
const int ShareListSubItem::kShareCommentHashFieldNumber;
#endif  // !_MSC_VER

ShareListSubItem::ShareListSubItem()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ShareListSubItem::InitAsDefaultInstance() {
}

ShareListSubItem::ShareListSubItem(const ShareListSubItem& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ShareListSubItem::SharedCtor() {
  _cached_size_ = 0;
  share_content_type_ = 0u;
  share_file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  thumbnail_file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  thumbnail_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  share_content_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  share_comment_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShareListSubItem::~ShareListSubItem() {
  SharedDtor();
}

void ShareListSubItem::SharedDtor() {
  if (share_file_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete share_file_name_;
  }
  if (thumbnail_file_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete thumbnail_file_name_;
  }
  if (thumbnail_data_ != &::google::protobuf::internal::GetEmptyString()) {
    delete thumbnail_data_;
  }
  if (share_content_hash_ != &::google::protobuf::internal::GetEmptyString()) {
    delete share_content_hash_;
  }
  if (share_comment_hash_ != &::google::protobuf::internal::GetEmptyString()) {
    delete share_comment_hash_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ShareListSubItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShareListSubItem& ShareListSubItem::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_share_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_share_2eproto();
#endif
  return *default_instance_;
}

ShareListSubItem* ShareListSubItem::default_instance_ = NULL;

ShareListSubItem* ShareListSubItem::New() const {
  return new ShareListSubItem;
}

void ShareListSubItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    share_content_type_ = 0u;
    if (has_share_file_name()) {
      if (share_file_name_ != &::google::protobuf::internal::GetEmptyString()) {
        share_file_name_->clear();
      }
    }
    if (has_thumbnail_file_name()) {
      if (thumbnail_file_name_ != &::google::protobuf::internal::GetEmptyString()) {
        thumbnail_file_name_->clear();
      }
    }
    if (has_thumbnail_data()) {
      if (thumbnail_data_ != &::google::protobuf::internal::GetEmptyString()) {
        thumbnail_data_->clear();
      }
    }
    if (has_share_content_hash()) {
      if (share_content_hash_ != &::google::protobuf::internal::GetEmptyString()) {
        share_content_hash_->clear();
      }
    }
    if (has_share_comment_hash()) {
      if (share_comment_hash_ != &::google::protobuf::internal::GetEmptyString()) {
        share_comment_hash_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ShareListSubItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 share_content_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &share_content_type_)));
          set_has_share_content_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_share_file_name;
        break;
      }

      // required bytes share_file_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_share_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_share_file_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_thumbnail_file_name;
        break;
      }

      // required bytes thumbnail_file_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_thumbnail_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_thumbnail_file_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_thumbnail_data;
        break;
      }

      // required bytes thumbnail_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_thumbnail_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_thumbnail_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_share_content_hash;
        break;
      }

      // required bytes share_content_hash = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_share_content_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_share_content_hash()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_share_comment_hash;
        break;
      }

      // required bytes share_comment_hash = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_share_comment_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_share_comment_hash()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShareListSubItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 share_content_type = 1;
  if (has_share_content_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->share_content_type(), output);
  }

  // required bytes share_file_name = 2;
  if (has_share_file_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->share_file_name(), output);
  }

  // required bytes thumbnail_file_name = 3;
  if (has_thumbnail_file_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->thumbnail_file_name(), output);
  }

  // required bytes thumbnail_data = 4;
  if (has_thumbnail_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->thumbnail_data(), output);
  }

  // required bytes share_content_hash = 5;
  if (has_share_content_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->share_content_hash(), output);
  }

  // required bytes share_comment_hash = 6;
  if (has_share_comment_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->share_comment_hash(), output);
  }

}

int ShareListSubItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 share_content_type = 1;
    if (has_share_content_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->share_content_type());
    }

    // required bytes share_file_name = 2;
    if (has_share_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->share_file_name());
    }

    // required bytes thumbnail_file_name = 3;
    if (has_thumbnail_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->thumbnail_file_name());
    }

    // required bytes thumbnail_data = 4;
    if (has_thumbnail_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->thumbnail_data());
    }

    // required bytes share_content_hash = 5;
    if (has_share_content_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->share_content_hash());
    }

    // required bytes share_comment_hash = 6;
    if (has_share_comment_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->share_comment_hash());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShareListSubItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShareListSubItem*>(&from));
}

void ShareListSubItem::MergeFrom(const ShareListSubItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_share_content_type()) {
      set_share_content_type(from.share_content_type());
    }
    if (from.has_share_file_name()) {
      set_share_file_name(from.share_file_name());
    }
    if (from.has_thumbnail_file_name()) {
      set_thumbnail_file_name(from.thumbnail_file_name());
    }
    if (from.has_thumbnail_data()) {
      set_thumbnail_data(from.thumbnail_data());
    }
    if (from.has_share_content_hash()) {
      set_share_content_hash(from.share_content_hash());
    }
    if (from.has_share_comment_hash()) {
      set_share_comment_hash(from.share_comment_hash());
    }
  }
}

void ShareListSubItem::CopyFrom(const ShareListSubItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShareListSubItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void ShareListSubItem::Swap(ShareListSubItem* other) {
  if (other != this) {
    std::swap(share_content_type_, other->share_content_type_);
    std::swap(share_file_name_, other->share_file_name_);
    std::swap(thumbnail_file_name_, other->thumbnail_file_name_);
    std::swap(thumbnail_data_, other->thumbnail_data_);
    std::swap(share_content_hash_, other->share_content_hash_);
    std::swap(share_comment_hash_, other->share_comment_hash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShareListSubItem::GetTypeName() const {
  return "peersafe.share.ShareListSubItem";
}


// ===================================================================

#ifndef _MSC_VER
const int ShareListItem::kShareIndexFieldNumber;
const int ShareListItem::kCreateTimeFieldNumber;
const int ShareListItem::kExistPeriodFieldNumber;
const int ShareListItem::kFriendChannelidFieldNumber;
const int ShareListItem::kSubItemFieldNumber;
#endif  // !_MSC_VER

ShareListItem::ShareListItem()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ShareListItem::InitAsDefaultInstance() {
}

ShareListItem::ShareListItem(const ShareListItem& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ShareListItem::SharedCtor() {
  _cached_size_ = 0;
  share_index_ = 0;
  create_time_ = 0u;
  exist_period_ = 0u;
  friend_channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShareListItem::~ShareListItem() {
  SharedDtor();
}

void ShareListItem::SharedDtor() {
  if (friend_channelid_ != &::google::protobuf::internal::GetEmptyString()) {
    delete friend_channelid_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ShareListItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShareListItem& ShareListItem::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_share_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_share_2eproto();
#endif
  return *default_instance_;
}

ShareListItem* ShareListItem::default_instance_ = NULL;

ShareListItem* ShareListItem::New() const {
  return new ShareListItem;
}

void ShareListItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    share_index_ = 0;
    create_time_ = 0u;
    exist_period_ = 0u;
    if (has_friend_channelid()) {
      if (friend_channelid_ != &::google::protobuf::internal::GetEmptyString()) {
        friend_channelid_->clear();
      }
    }
  }
  sub_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ShareListItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 share_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &share_index_)));
          set_has_share_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_create_time;
        break;
      }

      // required uint32 create_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exist_period;
        break;
      }

      // required uint32 exist_period = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exist_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exist_period_)));
          set_has_exist_period();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_friend_channelid;
        break;
      }

      // required bytes friend_channelid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friend_channelid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_friend_channelid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_sub_item;
        break;
      }

      // repeated .peersafe.share.ShareListSubItem sub_item = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sub_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sub_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_sub_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShareListItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 share_index = 1;
  if (has_share_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->share_index(), output);
  }

  // required uint32 create_time = 2;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->create_time(), output);
  }

  // required uint32 exist_period = 3;
  if (has_exist_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->exist_period(), output);
  }

  // required bytes friend_channelid = 4;
  if (has_friend_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->friend_channelid(), output);
  }

  // repeated .peersafe.share.ShareListSubItem sub_item = 5;
  for (int i = 0; i < this->sub_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->sub_item(i), output);
  }

}

int ShareListItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 share_index = 1;
    if (has_share_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->share_index());
    }

    // required uint32 create_time = 2;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_time());
    }

    // required uint32 exist_period = 3;
    if (has_exist_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exist_period());
    }

    // required bytes friend_channelid = 4;
    if (has_friend_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->friend_channelid());
    }

  }
  // repeated .peersafe.share.ShareListSubItem sub_item = 5;
  total_size += 1 * this->sub_item_size();
  for (int i = 0; i < this->sub_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sub_item(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShareListItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShareListItem*>(&from));
}

void ShareListItem::MergeFrom(const ShareListItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  sub_item_.MergeFrom(from.sub_item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_share_index()) {
      set_share_index(from.share_index());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_exist_period()) {
      set_exist_period(from.exist_period());
    }
    if (from.has_friend_channelid()) {
      set_friend_channelid(from.friend_channelid());
    }
  }
}

void ShareListItem::CopyFrom(const ShareListItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShareListItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  for (int i = 0; i < sub_item_size(); i++) {
    if (!this->sub_item(i).IsInitialized()) return false;
  }
  return true;
}

void ShareListItem::Swap(ShareListItem* other) {
  if (other != this) {
    std::swap(share_index_, other->share_index_);
    std::swap(create_time_, other->create_time_);
    std::swap(exist_period_, other->exist_period_);
    std::swap(friend_channelid_, other->friend_channelid_);
    sub_item_.Swap(&other->sub_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShareListItem::GetTypeName() const {
  return "peersafe.share.ShareListItem";
}


// ===================================================================

#ifndef _MSC_VER
const int ShareList::kShareListHashFieldNumber;
const int ShareList::kShareItemFieldNumber;
#endif  // !_MSC_VER

ShareList::ShareList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ShareList::InitAsDefaultInstance() {
}

ShareList::ShareList(const ShareList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ShareList::SharedCtor() {
  _cached_size_ = 0;
  share_list_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShareList::~ShareList() {
  SharedDtor();
}

void ShareList::SharedDtor() {
  if (share_list_hash_ != &::google::protobuf::internal::GetEmptyString()) {
    delete share_list_hash_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ShareList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShareList& ShareList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_share_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_share_2eproto();
#endif
  return *default_instance_;
}

ShareList* ShareList::default_instance_ = NULL;

ShareList* ShareList::New() const {
  return new ShareList;
}

void ShareList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_share_list_hash()) {
      if (share_list_hash_ != &::google::protobuf::internal::GetEmptyString()) {
        share_list_hash_->clear();
      }
    }
  }
  share_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ShareList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes share_list_hash = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_share_list_hash()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_share_item;
        break;
      }

      // repeated .peersafe.share.ShareListItem share_item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_share_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_share_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_share_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShareList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes share_list_hash = 1;
  if (has_share_list_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->share_list_hash(), output);
  }

  // repeated .peersafe.share.ShareListItem share_item = 2;
  for (int i = 0; i < this->share_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->share_item(i), output);
  }

}

int ShareList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes share_list_hash = 1;
    if (has_share_list_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->share_list_hash());
    }

  }
  // repeated .peersafe.share.ShareListItem share_item = 2;
  total_size += 1 * this->share_item_size();
  for (int i = 0; i < this->share_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->share_item(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShareList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShareList*>(&from));
}

void ShareList::MergeFrom(const ShareList& from) {
  GOOGLE_CHECK_NE(&from, this);
  share_item_.MergeFrom(from.share_item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_share_list_hash()) {
      set_share_list_hash(from.share_list_hash());
    }
  }
}

void ShareList::CopyFrom(const ShareList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShareList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < share_item_size(); i++) {
    if (!this->share_item(i).IsInitialized()) return false;
  }
  return true;
}

void ShareList::Swap(ShareList* other) {
  if (other != this) {
    std::swap(share_list_hash_, other->share_list_hash_);
    share_item_.Swap(&other->share_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShareList::GetTypeName() const {
  return "peersafe.share.ShareList";
}


// ===================================================================

#ifndef _MSC_VER
const int ShareSubCommen::kCreateTimeFieldNumber;
const int ShareSubCommen::kFriendChannelIdFieldNumber;
const int ShareSubCommen::kCommentDataFieldNumber;
#endif  // !_MSC_VER

ShareSubCommen::ShareSubCommen()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ShareSubCommen::InitAsDefaultInstance() {
}

ShareSubCommen::ShareSubCommen(const ShareSubCommen& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ShareSubCommen::SharedCtor() {
  _cached_size_ = 0;
  create_time_ = 0u;
  friend_channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  comment_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShareSubCommen::~ShareSubCommen() {
  SharedDtor();
}

void ShareSubCommen::SharedDtor() {
  if (friend_channel_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete friend_channel_id_;
  }
  if (comment_data_ != &::google::protobuf::internal::GetEmptyString()) {
    delete comment_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ShareSubCommen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShareSubCommen& ShareSubCommen::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_share_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_share_2eproto();
#endif
  return *default_instance_;
}

ShareSubCommen* ShareSubCommen::default_instance_ = NULL;

ShareSubCommen* ShareSubCommen::New() const {
  return new ShareSubCommen;
}

void ShareSubCommen::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    create_time_ = 0u;
    if (has_friend_channel_id()) {
      if (friend_channel_id_ != &::google::protobuf::internal::GetEmptyString()) {
        friend_channel_id_->clear();
      }
    }
    if (has_comment_data()) {
      if (comment_data_ != &::google::protobuf::internal::GetEmptyString()) {
        comment_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ShareSubCommen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 create_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_friend_channel_id;
        break;
      }

      // required bytes friend_channel_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friend_channel_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_friend_channel_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_comment_data;
        break;
      }

      // required bytes comment_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_comment_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShareSubCommen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 create_time = 1;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->create_time(), output);
  }

  // required bytes friend_channel_id = 2;
  if (has_friend_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->friend_channel_id(), output);
  }

  // required bytes comment_data = 3;
  if (has_comment_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->comment_data(), output);
  }

}

int ShareSubCommen::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 create_time = 1;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_time());
    }

    // required bytes friend_channel_id = 2;
    if (has_friend_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->friend_channel_id());
    }

    // required bytes comment_data = 3;
    if (has_comment_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->comment_data());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShareSubCommen::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShareSubCommen*>(&from));
}

void ShareSubCommen::MergeFrom(const ShareSubCommen& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_friend_channel_id()) {
      set_friend_channel_id(from.friend_channel_id());
    }
    if (from.has_comment_data()) {
      set_comment_data(from.comment_data());
    }
  }
}

void ShareSubCommen::CopyFrom(const ShareSubCommen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShareSubCommen::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ShareSubCommen::Swap(ShareSubCommen* other) {
  if (other != this) {
    std::swap(create_time_, other->create_time_);
    std::swap(friend_channel_id_, other->friend_channel_id_);
    std::swap(comment_data_, other->comment_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShareSubCommen::GetTypeName() const {
  return "peersafe.share.ShareSubCommen";
}


// ===================================================================

#ifndef _MSC_VER
const int ShareComment::kEveryCommentFieldNumber;
#endif  // !_MSC_VER

ShareComment::ShareComment()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ShareComment::InitAsDefaultInstance() {
}

ShareComment::ShareComment(const ShareComment& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ShareComment::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShareComment::~ShareComment() {
  SharedDtor();
}

void ShareComment::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ShareComment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShareComment& ShareComment::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_share_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_share_2eproto();
#endif
  return *default_instance_;
}

ShareComment* ShareComment::default_instance_ = NULL;

ShareComment* ShareComment::New() const {
  return new ShareComment;
}

void ShareComment::Clear() {
  every_comment_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ShareComment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .peersafe.share.ShareSubCommen every_comment = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_every_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_every_comment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_every_comment;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShareComment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .peersafe.share.ShareSubCommen every_comment = 1;
  for (int i = 0; i < this->every_comment_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->every_comment(i), output);
  }

}

int ShareComment::ByteSize() const {
  int total_size = 0;

  // repeated .peersafe.share.ShareSubCommen every_comment = 1;
  total_size += 1 * this->every_comment_size();
  for (int i = 0; i < this->every_comment_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->every_comment(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShareComment::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShareComment*>(&from));
}

void ShareComment::MergeFrom(const ShareComment& from) {
  GOOGLE_CHECK_NE(&from, this);
  every_comment_.MergeFrom(from.every_comment_);
}

void ShareComment::CopyFrom(const ShareComment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShareComment::IsInitialized() const {

  for (int i = 0; i < every_comment_size(); i++) {
    if (!this->every_comment(i).IsInitialized()) return false;
  }
  return true;
}

void ShareComment::Swap(ShareComment* other) {
  if (other != this) {
    every_comment_.Swap(&other->every_comment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShareComment::GetTypeName() const {
  return "peersafe.share.ShareComment";
}


// ===================================================================

#ifndef _MSC_VER
const int ShareContent::kContentDataFieldNumber;
#endif  // !_MSC_VER

ShareContent::ShareContent()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ShareContent::InitAsDefaultInstance() {
}

ShareContent::ShareContent(const ShareContent& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ShareContent::SharedCtor() {
  _cached_size_ = 0;
  content_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShareContent::~ShareContent() {
  SharedDtor();
}

void ShareContent::SharedDtor() {
  if (content_data_ != &::google::protobuf::internal::GetEmptyString()) {
    delete content_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ShareContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShareContent& ShareContent::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_share_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_share_2eproto();
#endif
  return *default_instance_;
}

ShareContent* ShareContent::default_instance_ = NULL;

ShareContent* ShareContent::New() const {
  return new ShareContent;
}

void ShareContent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_content_data()) {
      if (content_data_ != &::google::protobuf::internal::GetEmptyString()) {
        content_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ShareContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes content_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShareContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes content_data = 1;
  if (has_content_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->content_data(), output);
  }

}

int ShareContent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes content_data = 1;
    if (has_content_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content_data());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShareContent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShareContent*>(&from));
}

void ShareContent::MergeFrom(const ShareContent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content_data()) {
      set_content_data(from.content_data());
    }
  }
}

void ShareContent::CopyFrom(const ShareContent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShareContent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ShareContent::Swap(ShareContent* other) {
  if (other != this) {
    std::swap(content_data_, other->content_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShareContent::GetTypeName() const {
  return "peersafe.share.ShareContent";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace share
}  // namespace peersafe

// @@protoc_insertion_point(global_scope)
